Q .1  // find the element that appear only once in Array

function findElement(arr) {
    for (let i = 0; i < arr.length; i++) {
        let isUnique = true;
        for (let j = 0; j < arr.length; j++) {
            if (i !== j && arr[i] === arr[j]) {
                isUnique = false;
                // break;
            }
        }
        if (isUnique) {
            return arr[i];
        }
    }
    return null; // Return null if no unique element is found
}

const array = [4, 3, 2, 5, 4, 5, 3, 4];
console.log(findElement(array)); // Output: 2

----------------------------------- xx ----------------------------------------

Q . 2 // find a unique number of Array, whose elements are repeatating .

const array = [2,3,3,4,6,7,4,8,9,5,7,6];
// o/p - [3,4,6,7]

function findRepeatedElements(arr){
  const repeatedElements = [];
  
    for(let i=0; i<arr.length; i++){
        let count = 0;
        for(let j=0; j<arr.length; j++){
            if(arr[i] == arr[j]){
               count ++;
            }
        }
        
        if(count > 1 && !repeatedElements.includes(arr[i])){
            repeatedElements.push(arr[i]);
        }
    }
    return repeatedElements;
}

console.log(findRepeatedElements(array));

----------------------------------- xx ----------------------------------------

@ . 3 // Find Union of 2 Arrays

function findUnion(arr1, arr2) {
    const result = [...arr1]; // Start with all elements from arr1
    for (let num of arr2) {
        if (!result.includes(num)) { // Add only if it's not already in the result
            result.push(num);
        }
    }
    return [...new Set(result)];
}

const array1 = [1, 2, 2, 1];
const array2 = [2, 3];
console.log(findUnion(array1, array2)); // Output: [1, 2, 3]

----------------------------------- xx ----------------------------------------

Q . 4 // Merge 2 Sorted Array

const array1 = [1,3,5];
const array2 = [2,4,6];

function MergerSortedArray(arr1, arr2){
    const SortedArray = [];
    const mergeArray = [...arr1, ...arr2];
    
    for(let i=0; i<mergeArray.length; i++){
        for(let j=0; j<(mergeArray.length-i-1); j++){
            if(mergeArray[j] < mergeArray[j+1]){
                let temp = mergeArray[j];
                mergeArray[j] = mergeArray[j+1];
                mergeArray[j+1] = temp;
            }
        }
    }
    return mergeArray;
}

console.log(MergerSortedArray(array1,array2))

----------------------------------- xx ----------------------------------------

Q . 5 // Move all Zero's from Array to Right End

function moveZerosToEnd(arr) {
    let index = 0; // Pointer for placing non-zero elements

    // Move all non-zero elements to the front
    for (let i = 0; i < arr.length; i++) {
        if (arr[i] !== 0) {
            arr[index] = arr[i];
            index++;
        }
    }

    // Fill the rest of the array with zeros
    while (index < arr.length) {
        arr[index] = 0;
        index++;
    }

    return arr;
}

const array = [0, 1, 0, 3, 12];
console.log(moveZerosToEnd(array)); // Output: [1, 3, 12, 0, 0]


----------------------------------- xx ----------------------------------------



----------------------------------- xx ----------------------------------------



----------------------------------- xx ----------------------------------------



----------------------------------- xx ----------------------------------------




